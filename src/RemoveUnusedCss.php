<?php

namespace WeblaborMx\PhpRemoveUnusedCss;

use MatthiasMullie\Minify\CSS;

/**
 * Remove unused CSS from a stylesheet
 */
trait RemoveUnusedCss
{
    /**
     * @var array
     */
    protected $whitelistArray  = [];
    protected $styleSheetArray = [];
    protected $htmlFileArray   = [];
    protected $foundHtmlFiles  = [];
    protected $foundCssFiles   = [];
    protected $inlineCss   = [];

    /**
     * @var bool
     */
    protected $minify = false;
    protected $skipComment = false;


    /**
     * @var null|string
     */
    protected $appendFilename = null;


    /**
     * @var string
     */
    protected $cssFileComment = "/**\n * Created at: :time:\n * \n * This file was generated by https://github.com/weblabormx/php-remove-unused-css and should not be edited - please re-run the refactor process again instead\n */\n";


    /**
     * Specify if we should minify or not
     *
     * @param   bool  $bool
     * @return  $this
     */
    public function minify($bool = true)
    {
        $this->minify = $bool;

        return $this;
    }


    /**
     * Specify if we should skip adding the comment to the file or not
     *
     * @param   bool  $bool
     * @return  $this
     */
    public function skipComment($bool = true)
    {
        $this->skipComment = $bool;

        return $this;
    }


    /**
     * Overwrite the CSS comment
     *
     * @param   string  $string
     * @return  $this
     */
    public function comment($string)
    {
        $this->cssFileComment = $string;

        return $this;
    }


    /**
     * Append the filenames of the CSS with this value (e.g. bootstrap.stripped.css)
     *
     * @param   string  $string
     * @return  $this
     */
    public function setFilenameSuffix($string = '.refactored.min')
    {
        $this->appendFilename = $string;

        return $this;
    }


    /**
     * Add items to the whitelist array
     *
     * @param   string  ...$selectors
     * @return  $this
     */
    public function whitelist(string ...$selectors)
    {
        foreach ($selectors as $whitelist) {

            if (!in_array($whitelist, $this->whitelistArray)) {
                $this->whitelistArray[] = $whitelist;
            }
        }

        return $this;
    }

    public function styleSheets(string ...$styleSheets)
    {
        foreach ($styleSheets as $styleSheet) {

            if (!in_array($styleSheet, $this->styleSheetArray)) {
                $this->styleSheetArray[] = $styleSheet;
            }
        }

        return $this;
    }


    /**
     * Add items to the style sheets array
     */
    public function styleSheetsFiles($styleSheets)
    {
        foreach ($styleSheets as $styleSheet) {

            if (!in_array($styleSheet, $this->foundCssFiles)) {
                $this->foundCssFiles[] = $styleSheet;
            }
        }

        return $this;
    }

    public function addInlineCss($inline_css)
    {
        $this->inlineCss[] = $inline_css;
        return $this;
    }


    /**
     * Add items to the html files array
     *
     * @param   string  ...$htmlFiles
     * @return  $this
     */
    public function htmlFiles(string ...$htmlFiles)
    {
        foreach ($htmlFiles as $htmlFile) {

            if (!in_array($htmlFile, $this->htmlFileArray)) {
                $this->htmlFileArray[] = $htmlFile;
            }
        }

        return $this;
    }

    /**
     * set html values
     */
    public function htmlValues($htmls)
    {
        foreach ($htmls as $htmlFile) {
            if (!in_array($htmlFile, $this->foundHtmlFiles)) {
                $this->foundHtmlFiles[] = $htmlFile;
            }
        }

        return $this;
    }


    /**
     * Get the comment (if required) for the top
     * of the CSS
     *
     * @return  string|string[]
     */
    protected function getComment()
    {
        if ($this->skipComment) {
            return '';
        }
        return str_replace(':time:', date('jS M Y, g:ia'), $this->cssFileComment);
    }


    /**
     * Find all the relevent HTML based files we want to scan
     * for used CSS elements
     *
     * @return  void
     */
    protected function findAllHtmlFiles()
    {
        foreach ($this->htmlFileArray as $searchPattern) {
            $this->foundHtmlFiles = array_merge($this->foundHtmlFiles, glob($searchPattern));
        }
    }


    /**
     * Find all the relevent CSS files to scan
     *
     * @return  void
     */
    protected function findAllStyleSheetFiles()
    {
        foreach ($this->styleSheetArray as $searchPattern) {
            $this->foundCssFiles = array_merge($this->foundCssFiles, glob($searchPattern));
        }

        if (!empty($this->appendFilename)) {

            foreach ($this->foundCssFiles as $key => $filename) {

                if (strpos($filename, $this->appendFilename) !== false) {
                    unset($this->foundCssFiles[$key]);
                }
            }
        }
    }


    /***
     * Create and fill a new file
     *
     * @param  string $filename
     * @param  stirng $source
     */
    protected function createFile($filename, $source)
    {
        touch($filename);
        file_put_contents($filename, $source);
    }


    /**
     * Minify some CSS
     *
     * @param   string  $string
     * @return  string
     */
    protected function performMinification($string)
    {
        $minifier = new CSS();
        $minifier->add($string);
        $css = $minifier->minify();
        if(strlen($css)==0){
            return;
        }

        return $this->getComment().$css;
    }
}
